CREATE DATABASE Reinterio_shop; 

CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_email character varying(30) COLLATE pg_catalog."default",
    user_password character varying(30) COLLATE pg_catalog."default",
    user_name character varying(30) COLLATE pg_catalog."default",
    user_surname character varying(30) COLLATE pg_catalog."default",
    user_patronymic character varying(30) COLLATE pg_catalog."default",
    user_address character varying(100) COLLATE pg_catalog."default",
    user_role integer,
    user_phome character varying(30),
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 10000 ),
    role_name character varying(20),
    role_description character varying(100),
    PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS public.products
(
    product_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    product_article integer,
    product_name character varying(30),
    product_price real DEFAULT 0,
    product_disc_price real NOT NULL,
    product_discount smallint,
    product_length real DEFAULT 0,
    product_width real DEFAULT 0,
    product_height real DEFAULT 0,
    product_weight real DEFAULT 0,
    product_shape integer DEFAULT 0,
    product_subcategory integer DEFAULT 03,
    PRIMARY KEY (product_id)
);

CREATE TABLE IF NOT EXISTS public.materials
(
    material_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    material_name character varying(30),
    PRIMARY KEY (material_id)
);

CREATE TABLE IF NOT EXISTS public.styles
(
    style_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    style_name character varying(30),
    PRIMARY KEY (style_id)
);

CREATE TABLE IF NOT EXISTS public.files
(
    file_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 10000 ),
    file_product integer,
    file_name character varying(30),
    file_path text,
    PRIMARY KEY (file_id)
);

CREATE TABLE IF NOT EXISTS public.product_details
(
    productd_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    productd_product integer,
    productd_color integer DEFAULT 0,
    productd_image integer DEFAULT 0,
    productd_onstock integer DEFAULT 0,
    productd_dailyoffer boolean,
    PRIMARY KEY (productd_id)
);

CREATE TABLE IF NOT EXISTS public.categories
(
    category_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    category_name character varying(30),
    categoty_image text,
    PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.shapes
(
    shape_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    shape_name character varying(30),
    PRIMARY KEY (shape_id)
);

CREATE TABLE IF NOT EXISTS public.colors
(
    color_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    color_name character varying(30),
    color_hex character varying(7),
    PRIMARY KEY (color_id)
);

CREATE TABLE IF NOT EXISTS public.images
(
    image_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    image_path character varying(100),
    PRIMARY KEY (image_id)
);

CREATE TABLE IF NOT EXISTS public.product_styles
(
    prodstyle_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 ),
    prodstyle_prod_id integer,
    prodstyle_style_id integer DEFAULT 0,
    PRIMARY KEY (prodstyle_id)
);

CREATE TABLE IF NOT EXISTS public.product_materials
(
    prodmaterial_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 ),
    prodmaterial_prod_id integer,
    prodmaterial_material_id integer DEFAULT 0,
    PRIMARY KEY (prodmaterial_id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    review_user integer,
    review_product integer,
    review_rating smallint DEFAULT 1,
    review_text text,
    review_image1 character varying(100),
    review_image2 character varying(100),
    review_image3 character varying(100),
    review_image4 character varying(100),
    review_image5 character varying(100),
    review_date date,
    PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.cart
(
    cart_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    cart_user integer NOT NULL,
    cart_product integer,
    cart_count integer,
    PRIMARY KEY (cart_id)
);

CREATE TABLE IF NOT EXISTS public.favourite
(
    favourite_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    favourite_user integer,
    favourite_product integer,
    PRIMARY KEY (favourite_id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    order_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    order_user integer NOT NULL,
    order_data date,
    order_delievery_date date,
    order_price real,
    order_status integer,
    order_delievery integer,
    order_address text,
    order_recipient text,
    PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.status
(
    status_id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 ),
    status_name character varying(30),
    PRIMARY KEY (status_id)
);

CREATE TABLE IF NOT EXISTS public.order_products
(
    orderprod_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    orderprod_order integer,
    orderprod_product integer,
    orderprod_count integer,
    orderprod_price real,
    PRIMARY KEY (orderprod_id)
);

CREATE TABLE IF NOT EXISTS public.delievery
(
    delivery_id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 ),
    delivery_name character varying(30),
    delivery_days integer,
    PRIMARY KEY (delivery_id)
);

CREATE TABLE IF NOT EXISTS public.subcategories
(
    subcategory_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 10000 ),
    subcategory_category integer,
    subcategory_name character varying(30),
    PRIMARY KEY (subcategory_id)
);

CREATE TABLE IF NOT EXISTS public.delievery_category
(
    deliverycategory_id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 ),
    deliverycategory_id_delievery integer,
    deliverycategory_id_category integer,
    deliverycategory_price real,
    PRIMARY KEY (deliverycategory_id_delievery)
);

ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT user_role FOREIGN KEY (user_role)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.products
    ADD CONSTRAINT product_shape FOREIGN KEY (product_shape)
    REFERENCES public.shapes (shape_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.products
    ADD CONSTRAINT product_subcategory FOREIGN KEY (product_subcategory)
    REFERENCES public.subcategories (subcategory_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT file_product FOREIGN KEY (file_product)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_details
    ADD CONSTRAINT productd_product FOREIGN KEY (productd_product)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_details
    ADD CONSTRAINT productd_color FOREIGN KEY (productd_color)
    REFERENCES public.colors (color_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_details
    ADD CONSTRAINT productd_image FOREIGN KEY (productd_image)
    REFERENCES public.images (image_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_styles
    ADD CONSTRAINT prodstyle_product FOREIGN KEY (prodstyle_prod_id)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_styles
    ADD CONSTRAINT prodstyle_style FOREIGN KEY (prodstyle_style_id)
    REFERENCES public.styles (style_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_materials
    ADD CONSTRAINT prodmateria_product FOREIGN KEY (prodmaterial_prod_id)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_materials
    ADD CONSTRAINT prodmaterial_material FOREIGN KEY (prodmaterial_material_id)
    REFERENCES public.materials (material_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT review_user FOREIGN KEY (review_user)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT review_product FOREIGN KEY (review_product)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_user FOREIGN KEY (cart_user)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_product FOREIGN KEY (cart_product)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite
    ADD CONSTRAINT favourite_user FOREIGN KEY (favourite_user)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite
    ADD CONSTRAINT favourite_product FOREIGN KEY (favourite_product)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT order_delievery FOREIGN KEY (order_delievery)
    REFERENCES public.delievery (delivery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT order_status FOREIGN KEY (order_status)
    REFERENCES public.status (status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT order_user FOREIGN KEY (order_user)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_products
    ADD CONSTRAINT orderprod_order FOREIGN KEY (orderprod_order)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_products
    ADD CONSTRAINT orderprod_prod FOREIGN KEY (orderprod_product)
    REFERENCES public.product_details (productd_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.subcategories
    ADD CONSTRAINT subcategory_category FOREIGN KEY (subcategory_category)
    REFERENCES public.categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.delievery_category
    ADD CONSTRAINT id_category FOREIGN KEY (deliverycategory_id_category)
    REFERENCES public.categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.delievery_category
    ADD CONSTRAINT id_delievery FOREIGN KEY (deliverycategory_id_delievery)
    REFERENCES public.delievery (delivery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;